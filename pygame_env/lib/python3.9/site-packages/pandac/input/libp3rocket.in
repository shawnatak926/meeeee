1730992849
3 3
11 libp3rocket 4 KHbU 14 panda3d.rocket 
11
13 18 RocketInputHandler 0 260 24 38 RocketInputHandler::RocketInputHandler 0 1 1 10
/**
 *
 */
75
RocketInputHandler::RocketInputHandler(std::string const &name = string());

14 14 get_rocket_key 0 4 24 34 RocketInputHandler::get_rocket_key 0 1 2 115
/**
 * Returns the libRocket KeyIdentifier for the given ButtonHandle, or
 * KI_UNKNOWN (0) if it wasn't known.
 */
73
static int RocketInputHandler::get_rocket_key(ButtonHandle const handle);

15 14 get_class_type 0 4 24 34 RocketInputHandler::get_class_type 0 1 3 0
59
static TypeHandle RocketInputHandler::get_class_type(void);

16 4 make 0 4 26 18 RocketRegion::make 0 2 4 5 428
/**
 * Creates a libRocket context with the given name (must be unique) for the
 * given window.  Returns a new DisplayRegion where the libRocket context will
 * render to.  This variant of make() creates a region that fills the entire
 * window.
 */

/**
 * Creates a libRocket context with the given name (must be unique) for the
 * given window.  Returns a new DisplayRegion where the libRocket context will
 * render to.
 */
238
static inline RocketRegion *RocketRegion::make(std::string const &context_name, GraphicsOutput *window);
static inline RocketRegion *RocketRegion::make(std::string const &context_name, GraphicsOutput *window, LVecBase4 const &dimensions);

17 11 get_context 0 4 26 25 RocketRegion::get_context 0 1 6 0
48
PyObject *RocketRegion::get_context(void) const;

18 17 set_input_handler 0 4 26 31 RocketRegion::set_input_handler 0 1 7 244
/**
 * Sets the RocketInputHandler object from which to gather the keyboard and
 * mouse inputs to pass to the libRocket context before rendering.  You may
 * use one input handler to provide inputs to any number of RocketRegion
 * objects.
 */
73
inline void RocketRegion::set_input_handler(RocketInputHandler *handler);

19 17 get_input_handler 0 4 26 31 RocketRegion::get_input_handler 0 1 8 91
/**
 * Returns the RocketInputHandler object previously passed to
 * set_input_handler.
 */
71
inline RocketInputHandler *RocketRegion::get_input_handler(void) const;

20 13 init_debugger 0 4 26 27 RocketRegion::init_debugger 0 1 9 205
/**
 * Initializes the libRocket debugger.  This will return false if the debugger
 * failed to initialize, or if support for the debugger has not been built in
 * (for example in an optimize=4 build).
 */
39
bool RocketRegion::init_debugger(void);

21 20 set_debugger_visible 0 4 26 34 RocketRegion::set_debugger_visible 0 1 10 55
/**
 * Sets whether the debugger should be visible.
 */
54
void RocketRegion::set_debugger_visible(bool visible);

22 19 is_debugger_visible 0 4 26 33 RocketRegion::is_debugger_visible 0 1 11 51
/**
 * Returns true if the debugger is visible.
 */
51
bool RocketRegion::is_debugger_visible(void) const;

23 14 get_class_type 0 4 26 28 RocketRegion::get_class_type 0 1 12 0
53
static TypeHandle RocketRegion::get_class_type(void);

12
1 0 0 23 3 31 0 0 10 /**
 *
 */ 1 4 name 5 33  
2 0 0 6 4 37 0 0 115 /**
 * Returns the libRocket KeyIdentifier for the given ButtonHandle, or
 * KI_UNKNOWN (0) if it wasn't known.
 */ 1 6 handle 1 34  
3 0 0 7 5 39 0 0 0 0 
4 0 0 23 8 42 0 0 250 /**
 * Creates a libRocket context with the given name (must be unique) for the
 * given window.  Returns a new DisplayRegion where the libRocket context will
 * render to.  This variant of make() creates a region that fills the entire
 * window.
 */ 2 12 context_name 1 33  6 window 1 40  
5 0 0 23 8 42 0 0 176 /**
 * Creates a libRocket context with the given name (must be unique) for the
 * given window.  Returns a new DisplayRegion where the libRocket context will
 * render to.
 */ 3 12 context_name 1 33  6 window 1 40  10 dimensions 1 43  
6 0 0 38 9 28 0 0 0 1 4 this 3 47  
7 0 0 4 14 49 0 0 244 /**
 * Sets the RocketInputHandler object from which to gather the keyboard and
 * mouse inputs to pass to the libRocket context before rendering.  You may
 * use one input handler to provide inputs to any number of RocketRegion
 * objects.
 */ 2 4 this 3 42  7 handler 1 31  
8 0 0 7 15 31 0 0 91 /**
 * Returns the RocketInputHandler object previously passed to
 * set_input_handler.
 */ 1 4 this 3 47  
9 0 0 6 18 32 0 0 205 /**
 * Initializes the libRocket debugger.  This will return false if the debugger
 * failed to initialize, or if support for the debugger has not been built in
 * (for example in an optimize=4 build).
 */ 1 4 this 3 42  
10 0 0 4 19 49 0 0 55 /**
 * Sets whether the debugger should be visible.
 */ 2 4 this 3 42  7 visible 1 32  
11 0 0 6 20 32 0 0 51 /**
 * Returns true if the debugger is visible.
 */ 1 4 this 3 47  
12 0 0 7 23 39 0 0 0 0 
26
24 18 RocketInputHandler 0 75777 18 RocketInputHandler 18 RocketInputHandler 0 0 0 1 13 0 0 2 14 15 0 0 1 0 25 0 0 0 0 95
/**
 * DataNode that listens for keyboard and mouse events and passes them to
 * libRocket.
 */

25 8 DataNode 0 2048 8 DataNode 8 DataNode 0 0 0 0 0 0 0 0 0 0 0 0 422
/**
 * The fundamental type of node for the data graph.  The DataNode class is
 * itself primarily intended as an abstract class; it defines no inputs and no
 * outputs.  Most kinds of data nodes will derive from this to specify the
 * inputs and outputs in the constructor.
 *
 * DataNode does not attempt to cycle its data with a PipelineCycler.  The
 * data graph is intended to be used only within a single thread.
 */

26 12 RocketRegion 0 75777 12 RocketRegion 12 RocketRegion 0 0 0 0 0 3 50 51 52 8 16 17 18 19 20 21 22 23 0 0 1 0 27 0 0 0 0 99
/**
 * Represents a region in a window or buffer where the libRocket UI will be
 * rendered to.
 */

27 13 DisplayRegion 0 2048 13 DisplayRegion 13 DisplayRegion 0 0 0 0 0 0 0 0 0 0 0 0 399
/**
 * A rectangular subregion within a window for rendering into.  Typically,
 * there is one DisplayRegion that covers the whole window, but you may also
 * create smaller DisplayRegions for having different regions within the
 * window that represent different scenes.  You may also stack up
 * DisplayRegions like panes of glass, usually for layering 2-d interfaces on
 * top of a 3-d scene.
 */

28 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 29 0 0 0 0 0 0 0 0 0 0

29 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 30 0 0 0 0 0 0 0 0 0 0

30 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

31 20 RocketInputHandler * 0 8576 20 RocketInputHandler * 20 RocketInputHandler * 0 0 24 0 0 0 0 0 0 0 0 0 0

32 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

33 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

34 20 ButtonHandle const * 0 8576 20 ButtonHandle const * 20 ButtonHandle const * 0 0 35 0 0 0 0 0 0 0 0 0 0

35 18 ButtonHandle const 0 8832 18 ButtonHandle const 18 ButtonHandle const 0 0 36 0 0 0 0 0 0 0 0 0 0

36 12 ButtonHandle 0 16779264 12 ButtonHandle 12 ButtonHandle 0 0 0 0 0 0 0 0 0 0 0 0 162
/**
 * A ButtonHandle represents a single button from any device, including
 * keyboard buttons and mouse buttons (but see KeyboardButton and
 * MouseButton).
 */

37 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

38 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

39 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 38 0 0 0 0 0 0 0 0 0 0

40 16 GraphicsOutput * 0 8576 16 GraphicsOutput * 16 GraphicsOutput * 0 0 41 0 0 0 0 0 0 0 0 0 0

41 14 GraphicsOutput 0 2048 14 GraphicsOutput 14 GraphicsOutput 0 0 0 0 0 0 0 0 0 0 0 0 0

42 14 RocketRegion * 0 8576 14 RocketRegion * 14 RocketRegion * 0 0 26 0 0 0 0 0 0 0 0 0 0

43 17 LVecBase4 const * 0 8576 17 LVecBase4 const * 17 LVecBase4 const * 0 0 44 0 0 0 0 0 0 0 0 0 0

44 15 LVecBase4 const 0 8832 15 LVecBase4 const 15 LVecBase4 const 0 0 45 0 0 0 0 0 0 0 0 0 0

45 9 LVecBase4 0 2105344 9 LVecBase4 9 LVecBase4 0 0 46 0 0 0 0 0 0 0 0 0 0

46 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

47 20 RocketRegion const * 0 8576 20 RocketRegion const * 20 RocketRegion const * 0 0 48 0 0 0 0 0 0 0 0 0 0

48 18 RocketRegion const 0 8832 18 RocketRegion const 18 RocketRegion const 0 0 26 0 0 0 0 0 0 0 0 0 0

49 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

0
3
50 7 context 0 2 28 17 0 0 0 0 0 0 0 21 RocketRegion::context 0

51 13 input_handler 0 6 31 19 18 0 0 0 0 0 0 27 RocketRegion::input_handler 0

52 16 debugger_visible 0 6 32 22 21 0 0 0 0 0 0 30 RocketRegion::debugger_visible 0

0
